// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model App {
    id Int @id @default(autoincrement())
    initialized Boolean @default(false)
}

model Mooc {
    id           String        @id @default(cuid())
    organization String
    title        String
    courseNumber String        @unique
    description  String?
    theme        String?
    target       String?
    sessions     MoocSession[]
    pinnedBy     PinnedMooc[]
}

model MoocSession {
    id                 String        @id @default(cuid())
    sessionName        String
    enrollmentsDetails Json?
    totalEnrollments   Int           @default(0)
    startDate          DateTime?
    endDate            DateTime?
    ended              Boolean       @default(false)
    cutoffs            Float
    gradeReports       GradeReport[]
    typeID             String?
    mooc               Mooc          @relation(fields: [moocID], references: [id])
    moocID             String
    forumInstanceName  String?
    forum              Forum? @relation(fields: [forumInstanceName], references: [instanceName])
    @@unique([moocID, sessionName])
}

model Forum {
    instanceName String @unique
    apiKey String
    moocSessions MoocSession[]
}

model GradeReport {
    id            String      @id @default(cuid())
    date          DateTime    @default(now())
    moocSession   MoocSession @relation(fields: [moocSessionId], references: [id])
    moocSessionId String
    totalUsers    Int
    totalActive   Int
    totalCurious  Int
    totalEligible Int
    score         Json
    interest      Json
    threshold     Json
}

model User {
    id          String       @id
    email       String       @unique
    firstname   String
    lastname    String
    password    String
    sessions    Session[]
    pinnedMoocs PinnedMooc[]
    rolename    String
    role        Role        @relation(fields: [rolename], references: [name])
    moocSessions String[]
    isAdmin Boolean @default(false)
}

model Role {
    name  String @id
    users User[]
}

model PinnedMooc {
    id     String @id @default(cuid())
    user   User   @relation(references: [id], fields: [userId], onDelete: Cascade)
    userId String
    mooc   Mooc   @relation(fields: [moocId], references: [id])
    moocId String

    @@unique([userId, moocId])
}

model Session {
    id        String   @id
    userId    String
    expiresAt DateTime
    user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Invitation {
    id String @id @default(cuid())
    tokenHash String   @unique
    isGuest  Boolean
    email     String @unique
    expiresAt DateTime
    moocSessions String[]
}
